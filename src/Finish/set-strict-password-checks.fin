#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)set-strict-password-checks.fin	1.6	05/05/24 SMI"
#
# This script installs stricter password requirements for users.  Note
# that this effects local password policy only.

logMessage "Installing stricter password requirements."
echo ""

if check_os_min_revision 5.10; then

   PASSWD=${JASS_ROOT_DIR}etc/default/passwd

   if [ ! -f ${PASSWD} ]; then
      create_a_file -m 0444 -o root:sys ${PASSWD}
      echo ""
   fi

   # Determine the values to be used.  If values are
   # already in place, then use them.  Otherwise, use the
   # defaults that are included below.

   # This is required before using check_and_log_change_needed
   change_needed="0"

   check_and_log_change_needed "${PASSWD}" "MINALPHA" "${JASS_PASS_MINALPHA}"
   minalpha="${new_var}"

   check_and_log_change_needed "${PASSWD}" "MINDIFF" "${JASS_PASS_MINDIFF}"
   mindiff="${new_var}"

   if [ ! -z "${JASS_PASS_MINNONALPHA}" ]; then
      # If NONALPHA is set, we do not use SPECIAL and DIGIT
      check_and_log_change_needed "${PASSWD}" "MINNONALPHA" "${JASS_PASS_MINNONALPHA}"
      minnonalpha="${new_var}"

      mindigit=""
      minspecial=""
   else
      # Otherwise we don't use nonalpha
      check_and_log_change_needed "${PASSWD}" "MINDIGIT" "${JASS_PASS_MINDIGIT}"
      mindigit="${new_var}"

      check_and_log_change_needed "${PASSWD}" "MINSPECIAL" "${JASS_PASS_MINSPECIAL}"
      minspecial="${new_var}"

      minnonalpha=""
   fi

   check_and_log_change_needed "${PASSWD}" "MINUPPER" "${JASS_PASS_MINUPPER}"
   minupper="${new_var}"

   check_and_log_change_needed "${PASSWD}" "MINLOWER" "${JASS_PASS_MINLOWER}"
   minlower="${new_var}"

   check_and_log_change_needed "${PASSWD}" "MAXREPEATS" "${JASS_PASS_MAXREPEATS}"
   maxrepeats="${new_var}"

   check_and_log_change_needed "${PASSWD}" "NAMECHECK" "${JASS_PASS_NAMECHECK}"
   namecheck="${new_var}"

   check_and_log_change_needed "${PASSWD}" "WHITESPACE" "${JASS_PASS_WHITESPACE}"
   whitespace="${new_var}"

   check_and_log_change_needed "${PASSWD}" "DICTIONDBDIR" "${JASS_PASS_DICTIONDBDIR}"
   dbdir="${new_var}"

   check_and_log_change_needed "${PASSWD}" "DICTIONLIST" "${JASS_PASS_DICTIONLIST}"
   diction="${new_var}"


   # If it isn't a directory, there's a problem.
   if [ ! -d "${JASS_ROOT_DIR}/${dbdir}" ]; then
      mkdir_dashp "${JASS_ROOT_DIR}/${dbdir}"
   fi

   # We also need to check all the dictionaries for existence.
   dictionlist="`echo ${diction} | sed 's/,/ /g'`"
   newlist=""

   # If they don't exist, warn and null them out.
   for diction_file in ${dictionlist}; do
      if [ ! -s "${JASS_ROOT_DIR}/${diction_file}" ]; then
	 logError 'An Invalid dictionary was listed in JASS_PASS_DICTIONLIST, ${diction_file}.'
      else
	 if [ -z "${newlist}" ]; then
	    newlist="${diction_file}"
	 else
	    newlist="${diction_file},${newlist}"
	 fi
      fi
   done
   dictionlist=${newlist}

   if [ "${change_needed}" != "0" ]; then

      echo ""
      backup_file ${PASSWD}

      # Remove the old entries and insert the new ones.

      cat ${PASSWD}.${JASS_SUFFIX} |\
      egrep -v "((^#.*)|(^ *))(MINALPHA|MINDIFF|MINDIGIT|MINSPECIAL|MINUPPER\
|MINLOWER|MAXREPEATS|NAMECHECK|WHITESPACE|DICTIONDBDIR\
|DICTIONLIST|MINNONALPHA)=" > ${PASSWD}

      # Note : It is safe to write out all variables here, since nulls won't
      # be written. So we don't have to check for nonalpha/special
      # since we set the ones we don't want to null above.

      write_val_to_file "${PASSWD}" "MINALPHA" "${minalpha}"
      write_val_to_file "${PASSWD}" "MINDIFF"  "${mindiff}"
      write_val_to_file "${PASSWD}" "MINNONALPHA" "${minnonalpha}"
      write_val_to_file "${PASSWD}" "MINDIGIT" "${mindigit}"
      write_val_to_file "${PASSWD}" "MINSPECIAL" "${minspecial}"
      write_val_to_file "${PASSWD}" "MINUPPER" "${minupper}"
      write_val_to_file "${PASSWD}" "MINLOWER" "${minlower}"
      write_val_to_file "${PASSWD}" "MAXREPEATS" "${maxrepeats}"
      write_val_to_file "${PASSWD}" "WHITESPACE" "${whitespace}"
      write_val_to_file "${PASSWD}" "NAMECHECK" "${namecheck}"
      write_val_to_file "${PASSWD}" "DICTIONDBDIR" "${dbdir}"
      write_val_to_file "${PASSWD}" "DICTIONLIST" "${diction}"

      chown root:sys ${PASSWD}
      chmod 0444     ${PASSWD}
   fi
else
   logInvalidOSRevision "5.10+"
fi
