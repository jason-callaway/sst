#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#ident  "@(#)enable-password-changes.fin 1.1     07/01/29     SMI"
#
# This script forces all user passwords to fall under password
# expiration policy.  Otherwise, accounts that had no policy
# would not fall under the new policy until their passwords underwent
# a change.

# This script is better run after set-flexible-crypt, although
# that is not required.

logMessage "Enabling password policy change on user accounts."
echo ""

SHADOW_FILE=${JASS_ROOT_DIR}etc/shadow

if check_os_min_revision 5.10; then

   # passwd(1) takes policy dates in days, while all the passwd(4)
   # variables are in weeks.  We'll convert them here for efficiency.

   MAXDAYS=`echo ${JASS_AGING_MAXWEEKS} | awk '{print 7*$1}'`
   MINDAYS=`echo ${JASS_AGING_MINWEEKS} | awk '{print 7*$1}'`
   WARNDAYS=`echo ${JASS_AGING_WARNWEEKS} | awk '{print 7*$1}'`

   backedup=0

   # SST has always restricted itself to local accounts.  logins is the
   # more generic interface.
   for USERSTR in `egrep -v '^#|^$' ${SHADOW_FILE}`; do
      USER=`echo ${USERSTR} | nawk -F: '{print $1}'`
      EXP=`echo ${USERSTR} | nawk -F: '{print $3}'`
      MAXD=`echo ${USERSTR} | nawk -F: '{print $5}'`

      # A password is under expiration policy if
      # A) it is expired (EXP=0), or
      # B) MAXD has the right value

      # If we find a password that isn't under policy, we backup the file 
      # (once) and apply policy.

      if is_user_account_locked ${USER}; then
	 : # Do nothing for locked accounts
      else
	 if [ "${MAXD}" != "${MAXDAYS}" -a "${EXP}" != "0" \
	    -a "${USER}" != "root" ]; then
	    if [ $backedup -eq 0 ]; then
	       backup_file ${SHADOW_FILE}
	       logMessage 'Backing up ${SHADOW_FILE} due to policy changes'
	       backedup=1
	    fi

	    chroot ${JASS_ROOT_DIR} /usr/bin/passwd -n ${MINDAYS} \
	     -x ${MAXDAYS} -w ${WARNDAYS} ${USER}
	 fi
      fi
   done
else
   logInvalidOSRevision "5.10+"
fi

