#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)s15k-static-arp.fin	3.18	05/04/14 SMI"
#
# This script sets up static ARP on Sun Fire 15K I1 MAN network
# for SMS version 1.2 or later.
#

if [ "$JASS_SMS_OVERRIDE" = "1" ]; then
  logMessage "This script is not required for SMS 1.5."
else

SMS_V=${JASS_ROOT_DIR}opt/SUNWSMS/bin/smsversion
SMS_SYSID=${JASS_ROOT_DIR}opt/SUNWSMS/bin/sysid
SMS_SCMAN=${JASS_ROOT_DIR}etc/hostname.scman0
SMS_DMAN=${JASS_ROOT_DIR}etc/hostname.dman0
SMS_SCARP=${JASS_ROOT_DIR}etc/sms_sc_arp
SMS_DARP=${JASS_ROOT_DIR}etc/sms_domain_arp
SMS_C=${JASS_ROOT_DIR}opt/SUNWSMS/bin/smsconfig

logMessage "Setting up static ARP on Sun Fire 15K.\n"

if [ ! -f ${SMS_SCMAN} -a ! -f ${SMS_DMAN} ]; then
   logNotice "This script can only be run on a Sun Fire 15K SC or Domain."
elif [ -f ${SMS_SCMAN} -a -f ${SMS_DMAN} ]; then
   logNotice "Cannot determine if this is a Sun Fire 15K SC or Domain."
else
   # Run these steps for SCs or domains first
   if [ -f ${SMS_SCMAN} ]; then
      which_one="SC"
      arpfiles="
		/etc/sms_sc_arp
		/etc/sms_domain_arp
		/etc/init.d/sms_arpconfig
		/etc/rc2.d/S73sms_arpconfig
	       "
      manf=${SMS_SCMAN}
   else
      which_one="Domain"
      arpfiles="
		/etc/sms_domain_arp
		/etc/init.d/sms_arpconfig
		/etc/rc2.d/S73sms_arpconfig
	       "
      manf=${SMS_DMAN}
   fi

   logMessage "Installing Sun Fire 15K ${which_one}-specific files.\n"
   copy_files "${arpfiles}"

   # Check if /etc/hostname.{scman0|dman0} has "-arp"
   logMessage "\nSetting static ARP in ${manf}.\n"

   if [ -z "`grep -- '-arp' ${manf}`" ]; then
      contents=`cat ${manf}`
      disable_file ${manf}

      # Create a new hostname.{scman0|dman0} file in /tmp
      manf_tmp=${JASS_ROOT_DIR}tmp/`basename $manf`.tmp
      rm -rf ${manf_tmp}
      echo "${contents}" | sed -e 's/$/ -arp/' > ${manf_tmp}
      chown root:other ${manf_tmp}
      chmod 644        ${manf_tmp}

      # Copy new file from /tmp to /etc
      copy_a_file $manf_tmp $manf

      # Handle new JASS backup file created in /etc.
      # This is needed to prevent plumbing of backup files.

      # JASS backup file in /etc
      mysrc=${manf}.$JASS_SUFFIX

      # Note the checksum of the modified file (containing -arp)
      # and save it under backup suffix is intentional.
      echo "${mysrc}\t`checksum ${manf_tmp}`" >> $JASS_RUN_CHECKSUM

      # Remove original file in /tmp
      rm -f $manf_tmp

      # Save the JASS backup file to /etc.JASS to prevent plumbing.
      mydst=etc.JASS/`basename $mysrc`.moved
      mv $mysrc ${JASS_ROOT_DIR}$mydst

      # Add undo move so JASS backup file is moved to its original
      # location for undo step.
      add_to_manifest X "mv /$mydst /etc/`basename $mysrc`"
   fi

   # Run these steps for SCs only
   if [ -f ${SMS_SCMAN} ]; then
      if [ ! -f ${SMS_SYSID} ]; then
	 logNotice "${SMS_SYSID} does not exist; this script cannot be run."
      elif [ ! -x ${SMS_SYSID} ]; then
	 logNotice "${SMS_SYSID} not executable; this script cannot be run."
      elif [ ! -f ${SMS_SCARP} ]; then
	 logNotice "${SMS_SCARP} does not exist; this script cannot be run."
      elif [ ! -r ${SMS_SCARP} ]; then
	 logNotice "${SMS_SCARP} not readable; this script cannot be run."
      elif [ ! -f ${SMS_V} ]; then
	 logNotice "${SMS_V} does not exist; this script cannot be run."
      elif [ ! -x ${SMS_V} ]; then
	 logNotice "${SMS_V} not executable; this script cannot be run."
      elif [ ! -f ${SMS_C} ]; then
         logNotice "${SMS_C} does not exist; this script cannot be run."
      elif [ ! -x ${SMS_C} ]; then
         logNotice "${SMS_C} not executable; this script cannot be run."
      else
	 # Static ARP support is only available on SMS 1.2 and later
	 sms_version=`${SMS_V} -t`
	 case "${sms_version}" in
	 1.2|1.3|1.4|1.4.1)

            # Add root to platform svc group if required.
            sms_conf=0
            plat_list=`${SMS_C} -l platform`
            if [ -z "$plat_list" ]; then
               logNotice "Could not determine if root has platform priv."
            else
               if echo $plat_list | egrep -v "root.*platsvc" >/dev/null ; then
                  logMessage "Adding root to SMS platform svc group temporarily."
                  ${SMS_C} -a -u root -G svc platform
                  rc=$?
                  if [ $rc != 0 ]; then
                     logNotice "Could not add root to platform priv. group."
                  else
                     sms_conf=1
                  fi
               fi
            fi

	    # Change the ether addresses for each domain, if necessary
	    for dom in A B C D E F G H I J K L M N O P Q R
	    do
	       image=${JASS_ROOT_DIR}var/opt/SUNWSMS/data/${dom}/idprom.image

	       # If domain was not set up yet, skip it
	       if [ ! -f ${image} ]; then
		  continue
	       fi

	       old_mac=`${SMS_SYSID} -f ${image} | grep "Ethernet Address" | nawk '{print $4}'`
               old=`normalize_mac_address $old_mac`
	       if [ -z "${old}" ]; then
		  logNotice "Could not determine Domain ${dom} ethernet address."
		  continue
	       fi
	       new_mac=`grep -i sun15-${dom} ${SMS_SCARP} | nawk '{print $2}'`
               new=`normalize_mac_address $new_mac`
	       if [ -z "${new}" ]; then
		  logNotice "Could not find Domain ${dom} in ${SMS_SCARP}."
		  continue
	       fi

	       # Skip this domain if we don't need to change ethernet address
	       if [ "${old}" = "${new}" ]; then
		  continue
	       fi

               serial=`${SMS_SYSID} -f ${image} | grep "Serial" | nawk '{print $6}'`
               if [ -z "${serial}" ]; then
                  logNotice "Could not read Serial # for domain ${dom}."
                  continue
               fi

	       logMessage "\nChanging Domain ${dom} ethernet address from ${old} to ${new}.\n"
	       backup_file ${image}

	       # Update IDPROM image with new MAC for the domain
	       ${SMS_SYSID} -f ${image} -e $new -s ${serial}

	    done	# with domain changes on SC

            # Remove root setting that this script added.
            if [ $sms_conf = 1 ]; then
               ${SMS_C} -r -u root -G svc platform
               rc=$?
               if [ $rc != 0 ]; then
                  logNotice "Could not remove temporarily added root from platform priv. group."
               fi
            fi

	    ;;
	 *)
	    logNotice "Static ARP not supported for SMS ${sms_version}."
	    ;;
	 esac
      fi
   fi	# steps for SCs only!
fi

# SMS 1.5 exclusion message
fi
