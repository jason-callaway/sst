#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident  "@(#)disable-ldap-client.aud 1.13     05/03/30 SMI"
#

# **************************************************************************** 
# Service definition section.
# **************************************************************************** 

service="Lightweight Directory Access Protocol (LDAP) Service"
servfil="disable-ldap-client.aud"

#-----------------------------------------------------------------------------

servhdr_txt="
Description of Service or Function:

   The Lightweight Directory Access Protocol (LDAP) client provides directory
   lookup capability for systems against an LDAP server.  The utility 
   ldap_cachemgr(1M) provides caching for all parameters as specified and used
   by the LDAP naming service clients.  The ldap_cachemgr utility uses the 
   cache files which are originally created by executing the ldapclient(1M)
   utility, as cold start files.  Updates to the cache files take place 
   dynamically if profiles are used to configure the client.  See the init 
   option to ldapclient(1M).

Rationale for Verification Check:

   When the LDAP client functionality is started, the ldap_cachemgr is also
   started to provide support for name service caching.  While the LDAP client
   service and caching functionality can be useful functions, they may not be
   critical for system operation.  If these services are not needed, then they 
   should be disabled.

Determination of Compliance:

   This script determines if the LDAP client service is installed, configured
   or running on the system.  This script will indicate a failure if the 
   software is installed, configured to run (via a run-control script) or 
   actually running on the system.
"
#-----------------------------------------------------------------------------

servsrc="
   ${JASS_ROOT_DIR}etc/rc2.d/S71ldap.client
"

#-----------------------------------------------------------------------------

servkrc="
   ${JASS_ROOT_DIR}etc/rcS.d/K41ldap.client
   ${JASS_ROOT_DIR}etc/rc0.d/K41ldap.client
   ${JASS_ROOT_DIR}etc/rc1.d/K41ldap.client
"

#-----------------------------------------------------------------------------

servcfg="
   ${JASS_ROOT_DIR}var/ldap/ldap_client_file
"

#-----------------------------------------------------------------------------

servcmd="
   /usr/lib/ldap/ldap_cachemgr
"

svc="
   svc:/network/ldap/client:default
"

# **************************************************************************** 
# Check processing section.
# ****************************************************************************

start_audit "${servfil}" "${service}" "${servhdr_txt}"

if check_os_min_revision 5.10 ; then

   logMessage "\n${JASS_MSG_SOFTWARE_ENABLED}"
   check_serviceDisabled "${svc}" 1 LOG  

   logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
   check_serviceNotRunning "${svc}"  1 LOG

elif check_os_min_revision 5.8 ; then

   logMessage "${JASS_MSG_SOFTWARE_CONFIGURED}"
   if [ "${JASS_DISABLE_MODE}" = "conf" ]; then
      check_serviceConfigNotExists "${servcfg}" 1 LOG
   elif [ "${JASS_DISABLE_MODE}" = "script" ]; then
      check_startScriptNotExists "$servsrc" 1 LOG
      check_stopScriptNotExists  "$servkrc" 1 LOG
   fi

   logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
   check_processNotExists     "$servcmd" 1 LOG

else
   logInvalidOSRevision "5.8+"
fi

finish_audit
