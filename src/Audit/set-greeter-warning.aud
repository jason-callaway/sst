#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#ident	"@(#)set-greeter-warning.aud		1.3	07/02/01 SMI"
#

# **************************************************************************** 
# Service definition section.
# **************************************************************************** 

service="GUI greeter warnings"
servfil="set-greeter-warning.aud"

#-----------------------------------------------------------------------------

servhdr_txt="
Description of Service or Function:

   Graphical User Interface Logins (GUIs) are used to enter the system. The
   greeter string can be used to send messages to users as the log in.

Rationale for Verification Check:

   Establishing a policy for logins to the system and communicating this
   to users is important for clear standards of conduct, rights, and 
   responsiblities.

Determination of Compliance:

   This script determines if any of the window managers have their greeting
   strings set to a value other than that chosen by the system administrator,
   and logs a failure if they are.

"
#-----------------------------------------------------------------------------

servpkg="
   SUNWdtlog SUNWdtdte SUNWgnome-display-mgr-root
"

# **************************************************************************** 
# Check processing section.
# ****************************************************************************

start_audit "${servfil}" "${service}" "${servhdr_txt}"

if check_os_min_revision 5.10; then
   logMessage "${JASS_MSG_SOFTWARE_INSTALLED}"
   check_minimized_service "${svc}" 1 LOG

   logMessage "\n${JASS_MSG_SOFTWARE_CONFIGURED}"

   for file in ${JASS_ROOT_DIR}usr/dt/config/*/Xresources; do
      # if there were no such files, then file is now a literal
      if [ "${file}" = "${JASS_ROOT_DIR}usr/dt/config/*/Xresources" ]; then
	 break
      fi

      dir=`dirname ${file} | sed -e 's/usr/etc/'`
      myfile="${dir}/Xresources"
      if check_fileExists "${myfile}" 1 LOG; then
	 if check_fileContentsExist "${myfile}" "^[ 	]*Dtlogin\*greeting\.labelstring: Authorized uses only!$" 1; then
	    # - More Xemacs Formatting"
	    logSuccess "Dtlogin*greeting.labelstring was set properly in ${myfile}"
	 else
	    logFailure "Dtlogin*greeting.labelstring was not set properly in ${myfile}"
	 fi
	 
	 if check_fileContentsExist "${myfile}" "^[ 	]*Dtlogin\*greeting.persLabelstring: All activity may be \
monitored.$" 1; then
	    # - More Xemacs Formatting"
	    logSuccess "Dtlogin*greeting.persLabelstring was set properly in ${myfile}"
	 else
	    logFailure "Dtlogin*greeting.persLabelstring was not set properly in ${myfile}"
	 fi
      fi
	
      check_fileOwnerMatch  "${myfile}" 'root' 1 LOG
      check_fileGroupMatch  "${myfile}" 'sys' 1 LOG
      check_fileModeNoMatch "${myfile}" "-100 -20 -10 -2 -1" 1 LOG 
	 
   done


   GDM="${JASS_ROOT_DIR}etc/X11/gdm/gdm.conf"
   if check_fileExists "${GDM}" 1 LOG; then
      # Rather than doing the test three times, encode the
      # pass/fail into a bit-variable.
      pass=`nawk \
           '
            BEGIN {val = 0 }
            /^\[daemon\]/, /^\[/ && !/^\[daemon\]/ { \
	     if ($1 ~ /^Greeter=\/usr\/bin\/gdmlogin/) {val += 1} }
            /^\[greeter\]/, /^\[/ && !/^\[greeter\]/ { \
	     if ($1 ~ /^DefaultWelcome=false/) {val += 2}; \
	     if ($0 ~ /^Welcome=Authorized Uses Only!\\\\nAll activity may be monitored and reported\./) \
	        {val += 4}}
	    END { print val }
           ' ${GDM}`
      if [ "`expr ${pass} % 2`" = "1" ]; then
	 logSuccess "Greeter was set to /usr/bin/gdmlogin in ${GDM}"
      else
	 adjustScore 1
	 logFailure "Greeter was not set to /usr/bin/gdmlogin in ${GDM}"
      fi
      if [ "`expr ${pass} % 4 \/ 2`" = "1" ]; then
	 logSuccess "DefaultWelcome was set to false in ${GDM}"
      else
	 adjustScore 1
	 logFailure "DefaultWelcome was not set to false in ${GDM}"
      fi
      if [ "`expr ${pass} \/ 4`" = "1" ]; then
	 logSuccess "Welcome was set properly in ${GDM}"
      else
	 adjustScore 1
	 logFailure "Welcome was not set properly in ${GDM}"
      fi

      check_fileOwnerMatch  "${GDM}" 'root' 1 LOG
      check_fileGroupMatch  "${GDM}" 'other' 1 LOG
      check_fileModeNoMatch "${GDM}" "-100 -20 -10 -2 -1" 1 LOG 

   fi
else
   logInvalidOSRevision "5.10+"
fi

finish_audit
