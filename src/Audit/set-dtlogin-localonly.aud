#!/bin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the License).
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/CDDL.txt
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/CDDL.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets [] replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#ident	"@(#)set-dtlogin-localonly.aud		1.6	07/02/05 SMI"
#

# **************************************************************************** 
# Service definition section.
# **************************************************************************** 

service="dtlogin local Service"
servfil="set-dtlogin-localonly.aud"

#-----------------------------------------------------------------------------

servhdr_txt="
Description of Service or Function:

   The dtlogin(1X) client supports the following key tasks: (1) the launch of
   the dtgreet(1) login screen for explicitly managed local and remote 
   displays and XDMCP managed remote displays, access to traditional terminal
   (character) login from GUI login screen, system dependent user 
   authentication and login, and launching the selected session.

   The dtlogin client provides services similar to those  provided by init(1M),
   getty(1M) and login(1) on character terminals: prompting for login and 
   password, authenticating the user, and running a 'session'.

Rationale for Verification Check:

   While the dtlogin service can be a useful function, it may not be 
   necessary to allow remote access to it.  In this case, the ability of the
   service to accept remote connections should be disabled.

Determination of Compliance:

   This script determines if the dtlogin service is configured to allow remote
   connections.  This script will indicate a failure if the 
   software is configured to allow remote connections.  If the ability to only
   allow local connections is not available, the script will indicate a failure
   if the  software is installed, configured to run (via a run-control script)
   or actually running on the system.
"
#-----------------------------------------------------------------------------

servpkg="
   SUNWdtlog SUNWdtdte
"

#-----------------------------------------------------------------------------

servsrc="
   ${JASS_ROOT_DIR}etc/rc2.d/S99dtlogin
"

#-----------------------------------------------------------------------------

servkrc="
   ${JASS_ROOT_DIR}etc/rcS.d/K10dtlogin
   ${JASS_ROOT_DIR}etc/rc0.d/K10dtlogin
   ${JASS_ROOT_DIR}etc/rc1.d/K10dtlogin
"

#-----------------------------------------------------------------------------

servcmd="
   /usr/dt/bin/dtlogin
"

svc="
   svc:/application/graphical-login/cde-login
"

# You can't check a service for existence on a running system, since a 
# dependency might have created it.  Instead, check the instance. 
svcinst="
   svc:/application/graphical-login/cde-login:default
"

lrc="
   lrc:/etc/rc2_d/S99dtlogin
"

# **************************************************************************** 
# Check processing section.
# ****************************************************************************

start_audit "${servfil}" "${service}" "${servhdr_txt}"

if check_sbd_available; then
   logMessage "\n${JASS_MSG_SOFTWARE_CONFIGURED}"
   if check_serviceInstalled "${svcinst}" 0; then
      check_serviceOptionEnabled "${svc}" "dtlogin/args" "" \
       '-udpPort\\ 0' 1 LOG
   fi
elif check_os_min_revision 5.11; then
      logMessage "${JASS_MSG_SOFTWARE_INSTALLED}"
      check_minimized_service "${svcinst}" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_ENABLED}"
      check_serviceDisabled "${svcinst}" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
      check_serviceNotRunning "${svcinst}"  1 LOG

elif check_os_revision 5.10 ; then

   if check_serviceInstalled "${svcinst}" 0 ; then
      logMessage "${JASS_MSG_SOFTWARE_INSTALLED}"
      check_minimized_service "${svcinst}" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_ENABLED}"
      check_serviceDisabled "${svcinst}" 1 LOG
      # Legacy service may also be present for S10:
      check_serviceNotInstalled "${lrc}" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
      check_serviceNotRunning "${svcinst}"  1 LOG

   else
      logMessage "${JASS_MSG_SOFTWARE_INSTALLED}"
      check_minimized            "$servpkg" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_CONFIGURED}"
      check_serviceNotInstalled "${lrc}" 1 LOG

      logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
      check_processNotExists     "$servcmd" 1 LOG
   fi

elif check_os_min_revision 5.6 ; then

   logMessage "${JASS_MSG_SOFTWARE_INSTALLED}"
   check_minimized            "$servpkg" 1 LOG

   logMessage "\n${JASS_MSG_SOFTWARE_CONFIGURED}"

   check_startScriptNotExists "$servsrc" 1 LOG

   # This method is commented since the disable-dtlogin.fin Finish script
   # will attempt to use dtconfig to disable the service.  dtconfig will
   # not remove the kill scripts and therefore this will always result in
   # a failure.
   #
   # check_stopScriptNotExists  "$servkrc" 1 LOG
   
   logMessage "\n${JASS_MSG_SOFTWARE_RUNNING}"
   check_processNotExists     "$servcmd" 1 LOG

else
   logInvalidOSRevision "5.6+"
fi

finish_audit
